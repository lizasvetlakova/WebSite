#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebSite
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="sklad")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertКонтрагенты(Контрагенты instance);
    partial void UpdateКонтрагенты(Контрагенты instance);
    partial void DeleteКонтрагенты(Контрагенты instance);
    partial void InsertТовары(Товары instance);
    partial void UpdateТовары(Товары instance);
    partial void DeleteТовары(Товары instance);
    partial void InsertНакладные(Накладные instance);
    partial void UpdateНакладные(Накладные instance);
    partial void DeleteНакладные(Накладные instance);
    partial void InsertНовости(Новости instance);
    partial void UpdateНовости(Новости instance);
    partial void DeleteНовости(Новости instance);
    partial void InsertТипы_контрагентов(Типы_контрагентов instance);
    partial void UpdateТипы_контрагентов(Типы_контрагентов instance);
    partial void DeleteТипы_контрагентов(Типы_контрагентов instance);
    partial void InsertТипы_накладной(Типы_накладной instance);
    partial void UpdateТипы_накладной(Типы_накладной instance);
    partial void DeleteТипы_накладной(Типы_накладной instance);
    partial void InsertПоставки(Поставки instance);
    partial void UpdateПоставки(Поставки instance);
    partial void DeleteПоставки(Поставки instance);
    partial void InsertСодержание_накладной(Содержание_накладной instance);
    partial void UpdateСодержание_накладной(Содержание_накладной instance);
    partial void DeleteСодержание_накладной(Содержание_накладной instance);
    partial void InsertКатегории(Категории instance);
    partial void UpdateКатегории(Категории instance);
    partial void DeleteКатегории(Категории instance);
    partial void InsertПользователи(Пользователи instance);
    partial void UpdateПользователи(Пользователи instance);
    partial void DeleteПользователи(Пользователи instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["skladConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Контрагенты> Контрагенты
		{
			get
			{
				return this.GetTable<Контрагенты>();
			}
		}
		
		public System.Data.Linq.Table<Товары> Товары
		{
			get
			{
				return this.GetTable<Товары>();
			}
		}
		
		public System.Data.Linq.Table<Накладные> Накладные
		{
			get
			{
				return this.GetTable<Накладные>();
			}
		}
		
		public System.Data.Linq.Table<Новости> Новости
		{
			get
			{
				return this.GetTable<Новости>();
			}
		}
		
		public System.Data.Linq.Table<Типы_контрагентов> Типы_контрагентов
		{
			get
			{
				return this.GetTable<Типы_контрагентов>();
			}
		}
		
		public System.Data.Linq.Table<Типы_накладной> Типы_накладной
		{
			get
			{
				return this.GetTable<Типы_накладной>();
			}
		}
		
		public System.Data.Linq.Table<Поставки> Поставки
		{
			get
			{
				return this.GetTable<Поставки>();
			}
		}
		
		public System.Data.Linq.Table<Содержание_накладной> Содержание_накладной
		{
			get
			{
				return this.GetTable<Содержание_накладной>();
			}
		}
		
		public System.Data.Linq.Table<Категории> Категории
		{
			get
			{
				return this.GetTable<Категории>();
			}
		}
		
		public System.Data.Linq.Table<Пользователи> Пользователи
		{
			get
			{
				return this.GetTable<Пользователи>();
			}
		}
		
		public System.Data.Linq.Table<Содержание> Содержание
		{
			get
			{
				return this.GetTable<Содержание>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Контрагенты")]
	public partial class Контрагенты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_контрагента;
		
		private System.Nullable<int> _Код_типа;
		
		private string _Короткое_имя;
		
		private string _Полное_имя;
		
		private string _Адрес;
		
		private string _Телефон;
		
		private string _ИНН;
		
		private string _КПП;
		
		private string _Расчетный_счет;
		
		private string _Банк;
		
		private string _БИК;
		
		private string _Кор_счет;
		
		private EntitySet<Накладные> _Накладные;
		
		private EntitySet<Поставки> _Поставки;
		
		private EntitySet<Пользователи> _Пользователи;
		
		private EntityRef<Типы_контрагентов> _Типы_контрагентов;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_контрагентаChanging(int value);
    partial void OnКод_контрагентаChanged();
    partial void OnКод_типаChanging(System.Nullable<int> value);
    partial void OnКод_типаChanged();
    partial void OnКороткое_имяChanging(string value);
    partial void OnКороткое_имяChanged();
    partial void OnПолное_имяChanging(string value);
    partial void OnПолное_имяChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnИННChanging(string value);
    partial void OnИННChanged();
    partial void OnКППChanging(string value);
    partial void OnКППChanged();
    partial void OnРасчетный_счетChanging(string value);
    partial void OnРасчетный_счетChanged();
    partial void OnБанкChanging(string value);
    partial void OnБанкChanged();
    partial void OnБИКChanging(string value);
    partial void OnБИКChanged();
    partial void OnКор_счетChanging(string value);
    partial void OnКор_счетChanged();
    #endregion
		
		public Контрагенты()
		{
			this._Накладные = new EntitySet<Накладные>(new Action<Накладные>(this.attach_Накладные), new Action<Накладные>(this.detach_Накладные));
			this._Поставки = new EntitySet<Поставки>(new Action<Поставки>(this.attach_Поставки), new Action<Поставки>(this.detach_Поставки));
			this._Пользователи = new EntitySet<Пользователи>(new Action<Пользователи>(this.attach_Пользователи), new Action<Пользователи>(this.detach_Пользователи));
			this._Типы_контрагентов = default(EntityRef<Типы_контрагентов>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_контрагента", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_контрагента
		{
			get
			{
				return this._Код_контрагента;
			}
			set
			{
				if ((this._Код_контрагента != value))
				{
					this.OnКод_контрагентаChanging(value);
					this.SendPropertyChanging();
					this._Код_контрагента = value;
					this.SendPropertyChanged("Код_контрагента");
					this.OnКод_контрагентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_типа", DbType="Int")]
		public System.Nullable<int> Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					if (this._Типы_контрагентов.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Короткое_имя", DbType="VarChar(30)")]
		public string Короткое_имя
		{
			get
			{
				return this._Короткое_имя;
			}
			set
			{
				if ((this._Короткое_имя != value))
				{
					this.OnКороткое_имяChanging(value);
					this.SendPropertyChanging();
					this._Короткое_имя = value;
					this.SendPropertyChanged("Короткое_имя");
					this.OnКороткое_имяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Полное_имя", DbType="VarChar(80)")]
		public string Полное_имя
		{
			get
			{
				return this._Полное_имя;
			}
			set
			{
				if ((this._Полное_имя != value))
				{
					this.OnПолное_имяChanging(value);
					this.SendPropertyChanging();
					this._Полное_имя = value;
					this.SendPropertyChanged("Полное_имя");
					this.OnПолное_имяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Адрес", DbType="VarChar(50)")]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="VarChar(15)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ИНН", DbType="VarChar(25)")]
		public string ИНН
		{
			get
			{
				return this._ИНН;
			}
			set
			{
				if ((this._ИНН != value))
				{
					this.OnИННChanging(value);
					this.SendPropertyChanging();
					this._ИНН = value;
					this.SendPropertyChanged("ИНН");
					this.OnИННChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КПП", DbType="VarChar(25)")]
		public string КПП
		{
			get
			{
				return this._КПП;
			}
			set
			{
				if ((this._КПП != value))
				{
					this.OnКППChanging(value);
					this.SendPropertyChanging();
					this._КПП = value;
					this.SendPropertyChanged("КПП");
					this.OnКППChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Расчетный_счет", DbType="VarChar(25)")]
		public string Расчетный_счет
		{
			get
			{
				return this._Расчетный_счет;
			}
			set
			{
				if ((this._Расчетный_счет != value))
				{
					this.OnРасчетный_счетChanging(value);
					this.SendPropertyChanging();
					this._Расчетный_счет = value;
					this.SendPropertyChanged("Расчетный_счет");
					this.OnРасчетный_счетChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Банк", DbType="VarChar(50)")]
		public string Банк
		{
			get
			{
				return this._Банк;
			}
			set
			{
				if ((this._Банк != value))
				{
					this.OnБанкChanging(value);
					this.SendPropertyChanging();
					this._Банк = value;
					this.SendPropertyChanged("Банк");
					this.OnБанкChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_БИК", DbType="VarChar(25)")]
		public string БИК
		{
			get
			{
				return this._БИК;
			}
			set
			{
				if ((this._БИК != value))
				{
					this.OnБИКChanging(value);
					this.SendPropertyChanging();
					this._БИК = value;
					this.SendPropertyChanged("БИК");
					this.OnБИКChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Кор_счет", DbType="VarChar(25)")]
		public string Кор_счет
		{
			get
			{
				return this._Кор_счет;
			}
			set
			{
				if ((this._Кор_счет != value))
				{
					this.OnКор_счетChanging(value);
					this.SendPropertyChanging();
					this._Кор_счет = value;
					this.SendPropertyChanged("Кор_счет");
					this.OnКор_счетChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Контрагенты_Накладные", Storage="_Накладные", ThisKey="Код_контрагента", OtherKey="Код_контрагента")]
		public EntitySet<Накладные> Накладные
		{
			get
			{
				return this._Накладные;
			}
			set
			{
				this._Накладные.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Контрагенты_Поставки", Storage="_Поставки", ThisKey="Код_контрагента", OtherKey="Код_контрагента")]
		public EntitySet<Поставки> Поставки
		{
			get
			{
				return this._Поставки;
			}
			set
			{
				this._Поставки.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Контрагенты_Пользователи", Storage="_Пользователи", ThisKey="Код_контрагента", OtherKey="Код_контрагента")]
		public EntitySet<Пользователи> Пользователи
		{
			get
			{
				return this._Пользователи;
			}
			set
			{
				this._Пользователи.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Типы_контрагентов_Контрагенты", Storage="_Типы_контрагентов", ThisKey="Код_типа", OtherKey="Код_типа", IsForeignKey=true, DeleteRule="CASCADE")]
		public Типы_контрагентов Типы_контрагентов
		{
			get
			{
				return this._Типы_контрагентов.Entity;
			}
			set
			{
				Типы_контрагентов previousValue = this._Типы_контрагентов.Entity;
				if (((previousValue != value) 
							|| (this._Типы_контрагентов.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Типы_контрагентов.Entity = null;
						previousValue.Контрагенты.Remove(this);
					}
					this._Типы_контрагентов.Entity = value;
					if ((value != null))
					{
						value.Контрагенты.Add(this);
						this._Код_типа = value.Код_типа;
					}
					else
					{
						this._Код_типа = default(Nullable<int>);
					}
					this.SendPropertyChanged("Типы_контрагентов");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Накладные(Накладные entity)
		{
			this.SendPropertyChanging();
			entity.Контрагенты = this;
		}
		
		private void detach_Накладные(Накладные entity)
		{
			this.SendPropertyChanging();
			entity.Контрагенты = null;
		}
		
		private void attach_Поставки(Поставки entity)
		{
			this.SendPropertyChanging();
			entity.Контрагенты = this;
		}
		
		private void detach_Поставки(Поставки entity)
		{
			this.SendPropertyChanging();
			entity.Контрагенты = null;
		}
		
		private void attach_Пользователи(Пользователи entity)
		{
			this.SendPropertyChanging();
			entity.Контрагенты = this;
		}
		
		private void detach_Пользователи(Пользователи entity)
		{
			this.SendPropertyChanging();
			entity.Контрагенты = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Товары")]
	public partial class Товары : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_товара;
		
		private string _Наименование;
		
		private System.Nullable<int> _Артикул;
		
		private string _Объём;
		
		private string _Ед_измерения;
		
		private System.Nullable<decimal> _Цена;
		
		private System.Nullable<short> _Количество;
		
		private System.Nullable<int> _Код_категории;
		
		private EntitySet<Поставки> _Поставки;
		
		private EntitySet<Содержание_накладной> _Содержание_накладной;
		
		private EntityRef<Категории> _Категории;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_товараChanging(int value);
    partial void OnКод_товараChanged();
    partial void OnНаименованиеChanging(string value);
    partial void OnНаименованиеChanged();
    partial void OnАртикулChanging(System.Nullable<int> value);
    partial void OnАртикулChanged();
    partial void OnОбъёмChanging(string value);
    partial void OnОбъёмChanged();
    partial void OnЕд_измеренияChanging(string value);
    partial void OnЕд_измеренияChanged();
    partial void OnЦенаChanging(System.Nullable<decimal> value);
    partial void OnЦенаChanged();
    partial void OnКоличествоChanging(System.Nullable<short> value);
    partial void OnКоличествоChanged();
    partial void OnКод_категорииChanging(System.Nullable<int> value);
    partial void OnКод_категорииChanged();
    #endregion
		
		public Товары()
		{
			this._Поставки = new EntitySet<Поставки>(new Action<Поставки>(this.attach_Поставки), new Action<Поставки>(this.detach_Поставки));
			this._Содержание_накладной = new EntitySet<Содержание_накладной>(new Action<Содержание_накладной>(this.attach_Содержание_накладной), new Action<Содержание_накладной>(this.detach_Содержание_накладной));
			this._Категории = default(EntityRef<Категории>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_товара", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_товара
		{
			get
			{
				return this._Код_товара;
			}
			set
			{
				if ((this._Код_товара != value))
				{
					this.OnКод_товараChanging(value);
					this.SendPropertyChanging();
					this._Код_товара = value;
					this.SendPropertyChanged("Код_товара");
					this.OnКод_товараChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Наименование", DbType="VarChar(70)")]
		public string Наименование
		{
			get
			{
				return this._Наименование;
			}
			set
			{
				if ((this._Наименование != value))
				{
					this.OnНаименованиеChanging(value);
					this.SendPropertyChanging();
					this._Наименование = value;
					this.SendPropertyChanged("Наименование");
					this.OnНаименованиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Артикул", DbType="Int")]
		public System.Nullable<int> Артикул
		{
			get
			{
				return this._Артикул;
			}
			set
			{
				if ((this._Артикул != value))
				{
					this.OnАртикулChanging(value);
					this.SendPropertyChanging();
					this._Артикул = value;
					this.SendPropertyChanged("Артикул");
					this.OnАртикулChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Объём", DbType="VarChar(10)")]
		public string Объём
		{
			get
			{
				return this._Объём;
			}
			set
			{
				if ((this._Объём != value))
				{
					this.OnОбъёмChanging(value);
					this.SendPropertyChanging();
					this._Объём = value;
					this.SendPropertyChanged("Объём");
					this.OnОбъёмChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ед_измерения", DbType="VarChar(5)")]
		public string Ед_измерения
		{
			get
			{
				return this._Ед_измерения;
			}
			set
			{
				if ((this._Ед_измерения != value))
				{
					this.OnЕд_измеренияChanging(value);
					this.SendPropertyChanging();
					this._Ед_измерения = value;
					this.SendPropertyChanged("Ед_измерения");
					this.OnЕд_измеренияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена", DbType="Money")]
		public System.Nullable<decimal> Цена
		{
			get
			{
				return this._Цена;
			}
			set
			{
				if ((this._Цена != value))
				{
					this.OnЦенаChanging(value);
					this.SendPropertyChanging();
					this._Цена = value;
					this.SendPropertyChanged("Цена");
					this.OnЦенаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Количество", DbType="SmallInt")]
		public System.Nullable<short> Количество
		{
			get
			{
				return this._Количество;
			}
			set
			{
				if ((this._Количество != value))
				{
					this.OnКоличествоChanging(value);
					this.SendPropertyChanging();
					this._Количество = value;
					this.SendPropertyChanged("Количество");
					this.OnКоличествоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_категории", DbType="Int")]
		public System.Nullable<int> Код_категории
		{
			get
			{
				return this._Код_категории;
			}
			set
			{
				if ((this._Код_категории != value))
				{
					if (this._Категории.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_категорииChanging(value);
					this.SendPropertyChanging();
					this._Код_категории = value;
					this.SendPropertyChanged("Код_категории");
					this.OnКод_категорииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Товары_Поставки", Storage="_Поставки", ThisKey="Код_товара", OtherKey="Код_товара")]
		public EntitySet<Поставки> Поставки
		{
			get
			{
				return this._Поставки;
			}
			set
			{
				this._Поставки.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Товары_Содержание_накладной", Storage="_Содержание_накладной", ThisKey="Код_товара", OtherKey="Код_товара")]
		public EntitySet<Содержание_накладной> Содержание_накладной
		{
			get
			{
				return this._Содержание_накладной;
			}
			set
			{
				this._Содержание_накладной.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Категории_Товары", Storage="_Категории", ThisKey="Код_категории", OtherKey="Код_категории", IsForeignKey=true, DeleteRule="CASCADE")]
		public Категории Категории
		{
			get
			{
				return this._Категории.Entity;
			}
			set
			{
				Категории previousValue = this._Категории.Entity;
				if (((previousValue != value) 
							|| (this._Категории.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Категории.Entity = null;
						previousValue.Товары.Remove(this);
					}
					this._Категории.Entity = value;
					if ((value != null))
					{
						value.Товары.Add(this);
						this._Код_категории = value.Код_категории;
					}
					else
					{
						this._Код_категории = default(Nullable<int>);
					}
					this.SendPropertyChanged("Категории");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Поставки(Поставки entity)
		{
			this.SendPropertyChanging();
			entity.Товары = this;
		}
		
		private void detach_Поставки(Поставки entity)
		{
			this.SendPropertyChanging();
			entity.Товары = null;
		}
		
		private void attach_Содержание_накладной(Содержание_накладной entity)
		{
			this.SendPropertyChanging();
			entity.Товары = this;
		}
		
		private void detach_Содержание_накладной(Содержание_накладной entity)
		{
			this.SendPropertyChanging();
			entity.Товары = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Накладные")]
	public partial class Накладные : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_накладной;
		
		private System.Nullable<System.DateTime> _Дата;
		
		private System.Nullable<decimal> _Сумма;
		
		private string _Статус;
		
		private System.Nullable<int> _Код_пользователя;
		
		private System.Nullable<int> _Код_контрагента;
		
		private System.Nullable<int> _Код_типа;
		
		private EntitySet<Содержание_накладной> _Содержание_накладной;
		
		private EntityRef<Контрагенты> _Контрагенты;
		
		private EntityRef<Типы_накладной> _Типы_накладной;
		
		private EntityRef<Пользователи> _Пользователи;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_накладнойChanging(int value);
    partial void OnНомер_накладнойChanged();
    partial void OnДатаChanging(System.Nullable<System.DateTime> value);
    partial void OnДатаChanged();
    partial void OnСуммаChanging(System.Nullable<decimal> value);
    partial void OnСуммаChanged();
    partial void OnСтатусChanging(string value);
    partial void OnСтатусChanged();
    partial void OnКод_пользователяChanging(System.Nullable<int> value);
    partial void OnКод_пользователяChanged();
    partial void OnКод_контрагентаChanging(System.Nullable<int> value);
    partial void OnКод_контрагентаChanged();
    partial void OnКод_типаChanging(System.Nullable<int> value);
    partial void OnКод_типаChanged();
    #endregion
		
		public Накладные()
		{
			this._Содержание_накладной = new EntitySet<Содержание_накладной>(new Action<Содержание_накладной>(this.attach_Содержание_накладной), new Action<Содержание_накладной>(this.detach_Содержание_накладной));
			this._Контрагенты = default(EntityRef<Контрагенты>);
			this._Типы_накладной = default(EntityRef<Типы_накладной>);
			this._Пользователи = default(EntityRef<Пользователи>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер_накладной", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Номер_накладной
		{
			get
			{
				return this._Номер_накладной;
			}
			set
			{
				if ((this._Номер_накладной != value))
				{
					this.OnНомер_накладнойChanging(value);
					this.SendPropertyChanging();
					this._Номер_накладной = value;
					this.SendPropertyChanged("Номер_накладной");
					this.OnНомер_накладнойChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата", DbType="Date")]
		public System.Nullable<System.DateTime> Дата
		{
			get
			{
				return this._Дата;
			}
			set
			{
				if ((this._Дата != value))
				{
					this.OnДатаChanging(value);
					this.SendPropertyChanging();
					this._Дата = value;
					this.SendPropertyChanged("Дата");
					this.OnДатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сумма", DbType="Money")]
		public System.Nullable<decimal> Сумма
		{
			get
			{
				return this._Сумма;
			}
			set
			{
				if ((this._Сумма != value))
				{
					this.OnСуммаChanging(value);
					this.SendPropertyChanging();
					this._Сумма = value;
					this.SendPropertyChanged("Сумма");
					this.OnСуммаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Статус", DbType="VarChar(20)")]
		public string Статус
		{
			get
			{
				return this._Статус;
			}
			set
			{
				if ((this._Статус != value))
				{
					this.OnСтатусChanging(value);
					this.SendPropertyChanging();
					this._Статус = value;
					this.SendPropertyChanged("Статус");
					this.OnСтатусChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_пользователя", DbType="Int")]
		public System.Nullable<int> Код_пользователя
		{
			get
			{
				return this._Код_пользователя;
			}
			set
			{
				if ((this._Код_пользователя != value))
				{
					if (this._Пользователи.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_пользователяChanging(value);
					this.SendPropertyChanging();
					this._Код_пользователя = value;
					this.SendPropertyChanged("Код_пользователя");
					this.OnКод_пользователяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_контрагента", DbType="Int")]
		public System.Nullable<int> Код_контрагента
		{
			get
			{
				return this._Код_контрагента;
			}
			set
			{
				if ((this._Код_контрагента != value))
				{
					if (this._Контрагенты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_контрагентаChanging(value);
					this.SendPropertyChanging();
					this._Код_контрагента = value;
					this.SendPropertyChanged("Код_контрагента");
					this.OnКод_контрагентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_типа", DbType="Int")]
		public System.Nullable<int> Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					if (this._Типы_накладной.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Накладные_Содержание_накладной", Storage="_Содержание_накладной", ThisKey="Номер_накладной", OtherKey="Номер_накладной")]
		public EntitySet<Содержание_накладной> Содержание_накладной
		{
			get
			{
				return this._Содержание_накладной;
			}
			set
			{
				this._Содержание_накладной.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Контрагенты_Накладные", Storage="_Контрагенты", ThisKey="Код_контрагента", OtherKey="Код_контрагента", IsForeignKey=true, DeleteRule="CASCADE")]
		public Контрагенты Контрагенты
		{
			get
			{
				return this._Контрагенты.Entity;
			}
			set
			{
				Контрагенты previousValue = this._Контрагенты.Entity;
				if (((previousValue != value) 
							|| (this._Контрагенты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Контрагенты.Entity = null;
						previousValue.Накладные.Remove(this);
					}
					this._Контрагенты.Entity = value;
					if ((value != null))
					{
						value.Накладные.Add(this);
						this._Код_контрагента = value.Код_контрагента;
					}
					else
					{
						this._Код_контрагента = default(Nullable<int>);
					}
					this.SendPropertyChanged("Контрагенты");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Типы_накладной_Накладные", Storage="_Типы_накладной", ThisKey="Код_типа", OtherKey="Код_типа", IsForeignKey=true, DeleteRule="CASCADE")]
		public Типы_накладной Типы_накладной
		{
			get
			{
				return this._Типы_накладной.Entity;
			}
			set
			{
				Типы_накладной previousValue = this._Типы_накладной.Entity;
				if (((previousValue != value) 
							|| (this._Типы_накладной.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Типы_накладной.Entity = null;
						previousValue.Накладные.Remove(this);
					}
					this._Типы_накладной.Entity = value;
					if ((value != null))
					{
						value.Накладные.Add(this);
						this._Код_типа = value.Код_типа;
					}
					else
					{
						this._Код_типа = default(Nullable<int>);
					}
					this.SendPropertyChanged("Типы_накладной");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Пользователи_Накладные", Storage="_Пользователи", ThisKey="Код_пользователя", OtherKey="Код_пользователя", IsForeignKey=true, DeleteRule="CASCADE")]
		public Пользователи Пользователи
		{
			get
			{
				return this._Пользователи.Entity;
			}
			set
			{
				Пользователи previousValue = this._Пользователи.Entity;
				if (((previousValue != value) 
							|| (this._Пользователи.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Пользователи.Entity = null;
						previousValue.Накладные.Remove(this);
					}
					this._Пользователи.Entity = value;
					if ((value != null))
					{
						value.Накладные.Add(this);
						this._Код_пользователя = value.Код_пользователя;
					}
					else
					{
						this._Код_пользователя = default(Nullable<int>);
					}
					this.SendPropertyChanged("Пользователи");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Содержание_накладной(Содержание_накладной entity)
		{
			this.SendPropertyChanging();
			entity.Накладные = this;
		}
		
		private void detach_Содержание_накладной(Содержание_накладной entity)
		{
			this.SendPropertyChanging();
			entity.Накладные = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Новости")]
	public partial class Новости : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_новости;
		
		private System.Nullable<System.DateTime> _Дата;
		
		private string _Новость;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_новостиChanging(int value);
    partial void OnКод_новостиChanged();
    partial void OnДатаChanging(System.Nullable<System.DateTime> value);
    partial void OnДатаChanged();
    partial void OnНовостьChanging(string value);
    partial void OnНовостьChanged();
    #endregion
		
		public Новости()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_новости", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_новости
		{
			get
			{
				return this._Код_новости;
			}
			set
			{
				if ((this._Код_новости != value))
				{
					this.OnКод_новостиChanging(value);
					this.SendPropertyChanging();
					this._Код_новости = value;
					this.SendPropertyChanged("Код_новости");
					this.OnКод_новостиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата", DbType="Date")]
		public System.Nullable<System.DateTime> Дата
		{
			get
			{
				return this._Дата;
			}
			set
			{
				if ((this._Дата != value))
				{
					this.OnДатаChanging(value);
					this.SendPropertyChanging();
					this._Дата = value;
					this.SendPropertyChanged("Дата");
					this.OnДатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Новость", DbType="VarChar(100)")]
		public string Новость
		{
			get
			{
				return this._Новость;
			}
			set
			{
				if ((this._Новость != value))
				{
					this.OnНовостьChanging(value);
					this.SendPropertyChanging();
					this._Новость = value;
					this.SendPropertyChanged("Новость");
					this.OnНовостьChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Типы_контрагентов")]
	public partial class Типы_контрагентов : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_типа;
		
		private string _Название_типа;
		
		private EntitySet<Контрагенты> _Контрагенты;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_типаChanging(int value);
    partial void OnКод_типаChanged();
    partial void OnНазвание_типаChanging(string value);
    partial void OnНазвание_типаChanged();
    #endregion
		
		public Типы_контрагентов()
		{
			this._Контрагенты = new EntitySet<Контрагенты>(new Action<Контрагенты>(this.attach_Контрагенты), new Action<Контрагенты>(this.detach_Контрагенты));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_типа", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название_типа", DbType="VarChar(20)")]
		public string Название_типа
		{
			get
			{
				return this._Название_типа;
			}
			set
			{
				if ((this._Название_типа != value))
				{
					this.OnНазвание_типаChanging(value);
					this.SendPropertyChanging();
					this._Название_типа = value;
					this.SendPropertyChanged("Название_типа");
					this.OnНазвание_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Типы_контрагентов_Контрагенты", Storage="_Контрагенты", ThisKey="Код_типа", OtherKey="Код_типа")]
		public EntitySet<Контрагенты> Контрагенты
		{
			get
			{
				return this._Контрагенты;
			}
			set
			{
				this._Контрагенты.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Контрагенты(Контрагенты entity)
		{
			this.SendPropertyChanging();
			entity.Типы_контрагентов = this;
		}
		
		private void detach_Контрагенты(Контрагенты entity)
		{
			this.SendPropertyChanging();
			entity.Типы_контрагентов = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Типы_накладной")]
	public partial class Типы_накладной : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_типа;
		
		private string _Название_накладной;
		
		private EntitySet<Накладные> _Накладные;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_типаChanging(int value);
    partial void OnКод_типаChanged();
    partial void OnНазвание_накладнойChanging(string value);
    partial void OnНазвание_накладнойChanged();
    #endregion
		
		public Типы_накладной()
		{
			this._Накладные = new EntitySet<Накладные>(new Action<Накладные>(this.attach_Накладные), new Action<Накладные>(this.detach_Накладные));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_типа", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название_накладной", DbType="VarChar(20)")]
		public string Название_накладной
		{
			get
			{
				return this._Название_накладной;
			}
			set
			{
				if ((this._Название_накладной != value))
				{
					this.OnНазвание_накладнойChanging(value);
					this.SendPropertyChanging();
					this._Название_накладной = value;
					this.SendPropertyChanged("Название_накладной");
					this.OnНазвание_накладнойChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Типы_накладной_Накладные", Storage="_Накладные", ThisKey="Код_типа", OtherKey="Код_типа")]
		public EntitySet<Накладные> Накладные
		{
			get
			{
				return this._Накладные;
			}
			set
			{
				this._Накладные.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Накладные(Накладные entity)
		{
			this.SendPropertyChanging();
			entity.Типы_накладной = this;
		}
		
		private void detach_Накладные(Накладные entity)
		{
			this.SendPropertyChanging();
			entity.Типы_накладной = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Поставки")]
	public partial class Поставки : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_товара;
		
		private int _Код_контрагента;
		
		private System.Nullable<System.DateTime> _Дата;
		
		private EntityRef<Контрагенты> _Контрагенты;
		
		private EntityRef<Товары> _Товары;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_товараChanging(int value);
    partial void OnКод_товараChanged();
    partial void OnКод_контрагентаChanging(int value);
    partial void OnКод_контрагентаChanged();
    partial void OnДатаChanging(System.Nullable<System.DateTime> value);
    partial void OnДатаChanged();
    #endregion
		
		public Поставки()
		{
			this._Контрагенты = default(EntityRef<Контрагенты>);
			this._Товары = default(EntityRef<Товары>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_товара", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_товара
		{
			get
			{
				return this._Код_товара;
			}
			set
			{
				if ((this._Код_товара != value))
				{
					if (this._Товары.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_товараChanging(value);
					this.SendPropertyChanging();
					this._Код_товара = value;
					this.SendPropertyChanged("Код_товара");
					this.OnКод_товараChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_контрагента", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_контрагента
		{
			get
			{
				return this._Код_контрагента;
			}
			set
			{
				if ((this._Код_контрагента != value))
				{
					if (this._Контрагенты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_контрагентаChanging(value);
					this.SendPropertyChanging();
					this._Код_контрагента = value;
					this.SendPropertyChanged("Код_контрагента");
					this.OnКод_контрагентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата", DbType="DateTime")]
		public System.Nullable<System.DateTime> Дата
		{
			get
			{
				return this._Дата;
			}
			set
			{
				if ((this._Дата != value))
				{
					this.OnДатаChanging(value);
					this.SendPropertyChanging();
					this._Дата = value;
					this.SendPropertyChanged("Дата");
					this.OnДатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Контрагенты_Поставки", Storage="_Контрагенты", ThisKey="Код_контрагента", OtherKey="Код_контрагента", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Контрагенты Контрагенты
		{
			get
			{
				return this._Контрагенты.Entity;
			}
			set
			{
				Контрагенты previousValue = this._Контрагенты.Entity;
				if (((previousValue != value) 
							|| (this._Контрагенты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Контрагенты.Entity = null;
						previousValue.Поставки.Remove(this);
					}
					this._Контрагенты.Entity = value;
					if ((value != null))
					{
						value.Поставки.Add(this);
						this._Код_контрагента = value.Код_контрагента;
					}
					else
					{
						this._Код_контрагента = default(int);
					}
					this.SendPropertyChanged("Контрагенты");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Товары_Поставки", Storage="_Товары", ThisKey="Код_товара", OtherKey="Код_товара", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Товары Товары
		{
			get
			{
				return this._Товары.Entity;
			}
			set
			{
				Товары previousValue = this._Товары.Entity;
				if (((previousValue != value) 
							|| (this._Товары.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Товары.Entity = null;
						previousValue.Поставки.Remove(this);
					}
					this._Товары.Entity = value;
					if ((value != null))
					{
						value.Поставки.Add(this);
						this._Код_товара = value.Код_товара;
					}
					else
					{
						this._Код_товара = default(int);
					}
					this.SendPropertyChanged("Товары");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Содержание_накладной")]
	public partial class Содержание_накладной : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_накладной;
		
		private int _Код_товара;
		
		private System.Nullable<short> _Номер_записи;
		
		private System.Nullable<short> _Количество;
		
		private System.Nullable<decimal> _Цена;
		
		private System.Nullable<decimal> _Сумма;
		
		private EntityRef<Накладные> _Накладные;
		
		private EntityRef<Товары> _Товары;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_накладнойChanging(int value);
    partial void OnНомер_накладнойChanged();
    partial void OnКод_товараChanging(int value);
    partial void OnКод_товараChanged();
    partial void OnНомер_записиChanging(System.Nullable<short> value);
    partial void OnНомер_записиChanged();
    partial void OnКоличествоChanging(System.Nullable<short> value);
    partial void OnКоличествоChanged();
    partial void OnЦенаChanging(System.Nullable<decimal> value);
    partial void OnЦенаChanged();
    partial void OnСуммаChanging(System.Nullable<decimal> value);
    partial void OnСуммаChanged();
    #endregion
		
		public Содержание_накладной()
		{
			this._Накладные = default(EntityRef<Накладные>);
			this._Товары = default(EntityRef<Товары>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер_накладной", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Номер_накладной
		{
			get
			{
				return this._Номер_накладной;
			}
			set
			{
				if ((this._Номер_накладной != value))
				{
					if (this._Накладные.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnНомер_накладнойChanging(value);
					this.SendPropertyChanging();
					this._Номер_накладной = value;
					this.SendPropertyChanged("Номер_накладной");
					this.OnНомер_накладнойChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_товара", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_товара
		{
			get
			{
				return this._Код_товара;
			}
			set
			{
				if ((this._Код_товара != value))
				{
					if (this._Товары.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_товараChanging(value);
					this.SendPropertyChanging();
					this._Код_товара = value;
					this.SendPropertyChanged("Код_товара");
					this.OnКод_товараChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер_записи", DbType="SmallInt")]
		public System.Nullable<short> Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Количество", DbType="SmallInt")]
		public System.Nullable<short> Количество
		{
			get
			{
				return this._Количество;
			}
			set
			{
				if ((this._Количество != value))
				{
					this.OnКоличествоChanging(value);
					this.SendPropertyChanging();
					this._Количество = value;
					this.SendPropertyChanged("Количество");
					this.OnКоличествоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена", DbType="Money")]
		public System.Nullable<decimal> Цена
		{
			get
			{
				return this._Цена;
			}
			set
			{
				if ((this._Цена != value))
				{
					this.OnЦенаChanging(value);
					this.SendPropertyChanging();
					this._Цена = value;
					this.SendPropertyChanged("Цена");
					this.OnЦенаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сумма", DbType="Money")]
		public System.Nullable<decimal> Сумма
		{
			get
			{
				return this._Сумма;
			}
			set
			{
				if ((this._Сумма != value))
				{
					this.OnСуммаChanging(value);
					this.SendPropertyChanging();
					this._Сумма = value;
					this.SendPropertyChanged("Сумма");
					this.OnСуммаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Накладные_Содержание_накладной", Storage="_Накладные", ThisKey="Номер_накладной", OtherKey="Номер_накладной", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Накладные Накладные
		{
			get
			{
				return this._Накладные.Entity;
			}
			set
			{
				Накладные previousValue = this._Накладные.Entity;
				if (((previousValue != value) 
							|| (this._Накладные.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Накладные.Entity = null;
						previousValue.Содержание_накладной.Remove(this);
					}
					this._Накладные.Entity = value;
					if ((value != null))
					{
						value.Содержание_накладной.Add(this);
						this._Номер_накладной = value.Номер_накладной;
					}
					else
					{
						this._Номер_накладной = default(int);
					}
					this.SendPropertyChanged("Накладные");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Товары_Содержание_накладной", Storage="_Товары", ThisKey="Код_товара", OtherKey="Код_товара", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Товары Товары
		{
			get
			{
				return this._Товары.Entity;
			}
			set
			{
				Товары previousValue = this._Товары.Entity;
				if (((previousValue != value) 
							|| (this._Товары.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Товары.Entity = null;
						previousValue.Содержание_накладной.Remove(this);
					}
					this._Товары.Entity = value;
					if ((value != null))
					{
						value.Содержание_накладной.Add(this);
						this._Код_товара = value.Код_товара;
					}
					else
					{
						this._Код_товара = default(int);
					}
					this.SendPropertyChanged("Товары");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Категории")]
	public partial class Категории : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_категории;
		
		private string _Название_категории;
		
		private EntitySet<Товары> _Товары;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_категорииChanging(int value);
    partial void OnКод_категорииChanged();
    partial void OnНазвание_категорииChanging(string value);
    partial void OnНазвание_категорииChanged();
    #endregion
		
		public Категории()
		{
			this._Товары = new EntitySet<Товары>(new Action<Товары>(this.attach_Товары), new Action<Товары>(this.detach_Товары));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_категории", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_категории
		{
			get
			{
				return this._Код_категории;
			}
			set
			{
				if ((this._Код_категории != value))
				{
					this.OnКод_категорииChanging(value);
					this.SendPropertyChanging();
					this._Код_категории = value;
					this.SendPropertyChanged("Код_категории");
					this.OnКод_категорииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название_категории", DbType="VarChar(50)")]
		public string Название_категории
		{
			get
			{
				return this._Название_категории;
			}
			set
			{
				if ((this._Название_категории != value))
				{
					this.OnНазвание_категорииChanging(value);
					this.SendPropertyChanging();
					this._Название_категории = value;
					this.SendPropertyChanged("Название_категории");
					this.OnНазвание_категорииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Категории_Товары", Storage="_Товары", ThisKey="Код_категории", OtherKey="Код_категории")]
		public EntitySet<Товары> Товары
		{
			get
			{
				return this._Товары;
			}
			set
			{
				this._Товары.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Товары(Товары entity)
		{
			this.SendPropertyChanging();
			entity.Категории = this;
		}
		
		private void detach_Товары(Товары entity)
		{
			this.SendPropertyChanging();
			entity.Категории = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Пользователи")]
	public partial class Пользователи : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_пользователя;
		
		private string _ФИО;
		
		private string _Телефон;
		
		private string _Логин;
		
		private string _Пароль;
		
		private System.Nullable<int> _Роль;
		
		private System.Nullable<int> _Код_контрагента;
		
		private EntitySet<Накладные> _Накладные;
		
		private EntityRef<Контрагенты> _Контрагенты;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_пользователяChanging(int value);
    partial void OnКод_пользователяChanged();
    partial void OnФИОChanging(string value);
    partial void OnФИОChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnЛогинChanging(string value);
    partial void OnЛогинChanged();
    partial void OnПарольChanging(string value);
    partial void OnПарольChanged();
    partial void OnРольChanging(System.Nullable<int> value);
    partial void OnРольChanged();
    partial void OnКод_контрагентаChanging(System.Nullable<int> value);
    partial void OnКод_контрагентаChanged();
    #endregion
		
		public Пользователи()
		{
			this._Накладные = new EntitySet<Накладные>(new Action<Накладные>(this.attach_Накладные), new Action<Накладные>(this.detach_Накладные));
			this._Контрагенты = default(EntityRef<Контрагенты>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_пользователя", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_пользователя
		{
			get
			{
				return this._Код_пользователя;
			}
			set
			{
				if ((this._Код_пользователя != value))
				{
					this.OnКод_пользователяChanging(value);
					this.SendPropertyChanging();
					this._Код_пользователя = value;
					this.SendPropertyChanged("Код_пользователя");
					this.OnКод_пользователяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ФИО", DbType="VarChar(20)")]
		public string ФИО
		{
			get
			{
				return this._ФИО;
			}
			set
			{
				if ((this._ФИО != value))
				{
					this.OnФИОChanging(value);
					this.SendPropertyChanging();
					this._ФИО = value;
					this.SendPropertyChanged("ФИО");
					this.OnФИОChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="VarChar(20)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Логин", DbType="VarChar(20)")]
		public string Логин
		{
			get
			{
				return this._Логин;
			}
			set
			{
				if ((this._Логин != value))
				{
					this.OnЛогинChanging(value);
					this.SendPropertyChanging();
					this._Логин = value;
					this.SendPropertyChanged("Логин");
					this.OnЛогинChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Пароль", DbType="VarChar(20)")]
		public string Пароль
		{
			get
			{
				return this._Пароль;
			}
			set
			{
				if ((this._Пароль != value))
				{
					this.OnПарольChanging(value);
					this.SendPropertyChanging();
					this._Пароль = value;
					this.SendPropertyChanged("Пароль");
					this.OnПарольChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Роль", DbType="Int")]
		public System.Nullable<int> Роль
		{
			get
			{
				return this._Роль;
			}
			set
			{
				if ((this._Роль != value))
				{
					this.OnРольChanging(value);
					this.SendPropertyChanging();
					this._Роль = value;
					this.SendPropertyChanged("Роль");
					this.OnРольChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_контрагента", DbType="Int")]
		public System.Nullable<int> Код_контрагента
		{
			get
			{
				return this._Код_контрагента;
			}
			set
			{
				if ((this._Код_контрагента != value))
				{
					if (this._Контрагенты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКод_контрагентаChanging(value);
					this.SendPropertyChanging();
					this._Код_контрагента = value;
					this.SendPropertyChanged("Код_контрагента");
					this.OnКод_контрагентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Пользователи_Накладные", Storage="_Накладные", ThisKey="Код_пользователя", OtherKey="Код_пользователя")]
		public EntitySet<Накладные> Накладные
		{
			get
			{
				return this._Накладные;
			}
			set
			{
				this._Накладные.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Контрагенты_Пользователи", Storage="_Контрагенты", ThisKey="Код_контрагента", OtherKey="Код_контрагента", IsForeignKey=true)]
		public Контрагенты Контрагенты
		{
			get
			{
				return this._Контрагенты.Entity;
			}
			set
			{
				Контрагенты previousValue = this._Контрагенты.Entity;
				if (((previousValue != value) 
							|| (this._Контрагенты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Контрагенты.Entity = null;
						previousValue.Пользователи.Remove(this);
					}
					this._Контрагенты.Entity = value;
					if ((value != null))
					{
						value.Пользователи.Add(this);
						this._Код_контрагента = value.Код_контрагента;
					}
					else
					{
						this._Код_контрагента = default(Nullable<int>);
					}
					this.SendPropertyChanged("Контрагенты");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Накладные(Накладные entity)
		{
			this.SendPropertyChanging();
			entity.Пользователи = this;
		}
		
		private void detach_Накладные(Накладные entity)
		{
			this.SendPropertyChanging();
			entity.Пользователи = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Содержание")]
	public partial class Содержание
	{
		
		private int _Номер_накладной;
		
		private int _Код_товара;
		
		private string _Наименование;
		
		private System.Nullable<short> _Количество;
		
		private System.Nullable<decimal> _Цена;
		
		private System.Nullable<decimal> _Сумма;
		
		public Содержание()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер_накладной", DbType="Int NOT NULL")]
		public int Номер_накладной
		{
			get
			{
				return this._Номер_накладной;
			}
			set
			{
				if ((this._Номер_накладной != value))
				{
					this._Номер_накладной = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_товара", DbType="Int NOT NULL")]
		public int Код_товара
		{
			get
			{
				return this._Код_товара;
			}
			set
			{
				if ((this._Код_товара != value))
				{
					this._Код_товара = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Наименование", DbType="VarChar(70)")]
		public string Наименование
		{
			get
			{
				return this._Наименование;
			}
			set
			{
				if ((this._Наименование != value))
				{
					this._Наименование = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Количество", DbType="SmallInt")]
		public System.Nullable<short> Количество
		{
			get
			{
				return this._Количество;
			}
			set
			{
				if ((this._Количество != value))
				{
					this._Количество = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена", DbType="Money")]
		public System.Nullable<decimal> Цена
		{
			get
			{
				return this._Цена;
			}
			set
			{
				if ((this._Цена != value))
				{
					this._Цена = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сумма", DbType="Money")]
		public System.Nullable<decimal> Сумма
		{
			get
			{
				return this._Сумма;
			}
			set
			{
				if ((this._Сумма != value))
				{
					this._Сумма = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
